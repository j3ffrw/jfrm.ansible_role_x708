#!/usr/bin/env {{ x708_pip_venv_path }}/bin/python3
# https://raw.githubusercontent.com/suptronics/x708v2.0/main/bat.py

import struct
import smbus
import sys
import time
import gpiod

from gpiod.line import Direction, Value

GPIO_BUTTON_PORT = {{ x708_buttonpin }}
I2C_ADDR         = {{ x708_hex_i2caddress }}
CHIP_PATH        = "{{ x708_gpio_chip_path }}"
LOW_BATTERY      = {{ x708_battery_low_threshold }}
SLEEP_INTERVAL   = 2

def readVoltage(bus):

     address = I2C_ADDR
     read = bus.read_word_data(address, 2)
     swapped = struct.unpack("<H", struct.pack(">H", read))[0]
     voltage = swapped * 1.25 /1000/16
     return voltage

def readCapacity(bus):

     address = I2C_ADDR
     read = bus.read_word_data(address, 4)
     swapped = struct.unpack("<H", struct.pack(">H", read))[0]
     capacity = swapped/256
     return capacity

#  0 = /dev/i2c-0 (port I2C0), 1 = /dev/i2c-1 (port I2C1)
bus = smbus.SMBus(1)

while True:

#    print ("******************")
#    print ("Voltage:%5.2fV" % readVoltage(bus))
#    print ("Battery:%5i%%" % readCapacity(bus))
#    if readCapacity(bus) == 100:
#        print ("Battery FULL")
#    if readCapacity(bus) < 20:
#        print ("Battery Low")
  
  #   Set battery low voltage to shut down
    if readVoltage(bus) < LOW_BATTERY:
        print ("Battery LOW!!!")
        print ("Shutdown in 10 seconds")
        time.sleep(10)
        with gpiod.request_lines(
            CHIP_PATH,
            consumer="x708 Battery Monitor",
            config={
                GPIO_BUTTON_PORT: gpiod.LineSettings(
                    direction=Direction.OUTPUT, output_value=Value.INACTIVE
                )
            },
        ) as request:
            print (" Button pressed ")
            request.set_value(button_pin, Value.ACTIVE)
            time.sleep(3)
            request.set_value(button_pin, Value.INACTIVE)
            request.close()
  
    time.sleep(SLEEP_INTERVAL)
